---
# ------------------------------------------------------------------------------
# File: packages/chores.yaml
# Desc: Sensors that are used to track chores
# Inspired by: https://community.home-assistant.io/t/chores-keep-track-using-ha/153796
#
# Content:
# 0. YAML anchors
# 1. Input number
# 2. Input datetime
# 3. MQTT sensors
# 4. Scripts
# ------------------------------------------------------------------------------

group:
  household_tasks:
    name: Household Reminders
    entities:
      - sensor.chores_feed_the_cat
      - sensor.chores_hvac_cleaning

# 0. Anchors
homeassistant:
  customize:
    package.node_anchors:
      chore_sensor_mqtt_config: &chore_sensor_mqtt_config
        json_attributes_template: '{{ value_json.attributes | tojson }}'
        platform: mqtt
        unit_of_measurement: timestamp
        value_template: '{{ value_json.value }}'
# ------------------------------------------------------------------------------
# 1. Input numbers
input_number:
  # Defines when a chore enters the warning state
  chore_warning:
    min: 1
    max: 100
    step: 1
    unit_of_measurement: 'day(s)'
    mode: box
  # Desinfes when a chore enters the critical state
  chore_critical:
    min: 1
    max: 365
    step: 1
    unit_of_measurement: 'day(s)'
    mode: box
# ------------------------------------------------------------------------------
# 2. Input datetime
input_datetime:
  chore_date:
    has_date: true
    has_time: true
# ------------------------------------------------------------------------------
# 3. MQTT sensors (sorted by rooms)
sensor:
  # Cats -----------------------------------------------------------------------------------------------------------------------------------
  - state_topic: 'home/chores/feed_the_cat'
    name: chore_feed_the_cat
    json_attributes_topic: 'home/chores/feed_the_cat'
    <<: *chore_sensor_mqtt_config

  # HVAC Cleaning --------------------------------------------------------------------------------------------------------------------------
  - state_topic: 'home/chores/hvac_cleaning'
    name: chore_hvac_cleaning
    json_attributes_topic: 'home/chores/hvac_cleaning'
    <<: *chore_sensor_mqtt_config

  # Bedroom --------------------------------------------------------------------------------------------------------------------------------
  # Clean floor
  - state_topic: 'home/chores/chores_bedroom_clean_floor'
    name: chore_bedroom_clean_floor
    json_attributes_topic: 'home/chores/chores_bedroom_clean_floor'
    <<: *chore_sensor_mqtt_config
  # Clean dust
  - state_topic: 'home/chores/chores_bedroom_clean_dust'
    name: chore_bedroom_clean_dust
    json_attributes_topic: 'home/chores/chores_bedroom_clean_dust'
    <<: *chore_sensor_mqtt_config
# ------------------------------------------------------------------------------------------------------------------------------------------
# 4. Scripts
script:
  # Update chore value ---------------------------------------------------------------------------------------------------------------------
  # This will update the sensor value (timestamp when the chore was done) and keep its settings.
  chore_update:
    sequence:
      - data_template:
          topic: '{{ topic }}'
          payload: '{ "value": {{ now().timestamp() | int }}, "attributes": { "critical_after" : {{ critical_after }} , "warning_after": {{ warning_after }} }}'
          retain: true
        service: mqtt.publish
  # Update chore settings ------------------------------------------------------------------------------------------------------------------
  # This will keep the sensor value (timestamp when the chore was done) and update its settings.
  chore_update_settings:
    sequence:
      - data_template:
          topic: '{{ topic }}'
          payload: '{ "value": {{ states.input_datetime.chore_date.attributes.timestamp | int }}, "attributes": { "warning_after": {{ states.input_number.chore_warning.state | int }}, "critical_after": {{ states.input_number.chore_critical.state | int }} }}'
          retain: true
        service: mqtt.publish
  # Get chore settings ---------------------------------------------------------------------------------------------------------------------
  # This will trigger a popup that displays chore settings and a button to update them.
  chore_get_settings:
    sequence:
    # Set input number value according to chore sensor attributes
    - data_template:
        entity_id: input_number.chore_warning 
        value: '{{ warning_after }}'
      service: input_number.set_value
    - data_template:
        entity_id: input_number.chore_critical 
        value: '{{ critical_after }}'
      service: input_number.set_value
    # Set input date value according to chore sensor value
    - service: input_datetime.set_datetime
      data_template:
        entity_id: input_datetime.chore_date
        date: >
          {{ choreTs | timestamp_custom("%Y-%m-%d", true) }}
        time: >
          {{ choreTs | timestamp_custom("%H:%M:%S", true) }}
    # Fire a popup that displays chore settings
    - service: browser_mod.popup
      data_template:
        card:
          type: "custom:vertical-stack-in-card"
          cards:
          - type: entities
            entities:
              - entity: input_number.chore_warning
                icon: 'mdi:alert-outline'
                name: 'Alert after (days)'
              - entity: input_number.chore_critical
                icon: 'mdi:car-brake-alert'
                name: 'Critical after (days)'
              - entities:
                  - entity: input_datetime.chore_date
                    name: 'Effectu√© le'
                head:
                  type: section
                  label: R√©glages avanc√©s
                type: custom:fold-entity-row
          - type: "custom:button-card"
            name: Update Task
            show_name: true
            tap_action:
              action: call-service
              service: script.chore_update_settings
              service_data:
                topic: '{{ topic }}'
        title: "Configure a task"
        deviceID: ["{{ ','.join(deviceID) }}"]

automation:
# Notify on household task due
- id: notify_on_household_task_due
  alias: "Notification when a household task is due soon"
  variables:
    entities: "group.household_tasks"
  trigger:
    - platform: time
      at: "19:00:00"
  action:
    - repeat:
        count: "{{ expand(entities) | list | count }}"
        sequence:
          - variables:
              entity_id: >
                {% set tasks = expand(entities) | map(attribute='entity_id') | list %}
                {{ tasks[repeat.index - 1] }}
              task_id: "{{ entity_id.split('.')[1] }}"
              last_done_days: "{{ ((as_timestamp(now()) - (states(entity_id)) | float) / 60 / 60 / 24) | int }}"
              cycle_days: "{{ state_attr(entity_id, 'cycle_days') | int }}"
              warn_before_days: "{{ state_attr(entity_id, 'warning_before') | int }}"
          - condition: template
            value_template: "{{ last_done_days|int > (cycle_days|int - warn_before_days|int) }}"
          - service: notify.mobile_app_richards_phone
            data:
              title: "üßπ {{ state_attr(entity_id, 'friendly_name') }}"
              message: >
                Task was last done {{last_done_days}} days ago.
              data: 
                group: household-tasks
                tag: "{{ task_id }}"
                actions:
                  - action: done
                    title: "Done"

# Mark task as solved and reply
- id: mark_task_solved_when_confirmed
  alias: "Markiere Aufgabe als erledigt und bedanke bei Benutzer"
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: done
  action:
    - variables:
        task_id: "{{ trigger.event.data.tag }}"
        sensor_name: "{{ 'sensor.' + task_id }}"
        task_name: "{{ state_attr(sensor_name, 'friendly_name') }}"
        executor: >
          {% set user_id = trigger.event.context.user_id %}
          {% set id_map = {
            "6a6a294246724ba6a185d7830d21d48c": "dimitri",
            "fb7da472ed7545edbca64c66440bce41": "sabrina"
          } %}
          {{ id_map[user_id] }}
        other_person: "{{ 'dimitri' if executor == 'sabrina' else 'dimitri' }}"
    # Mark task as solved by publishing timestamp to task topic
    - service: mqtt.publish
      data:
        topic: "homeassistant/sensor/{{task_id}}/state"
        payload: >
          {
            "state": {{ as_timestamp(now())|round(3) }},
            "attributes": {
              "executor": "{{ executor.title() }}",
              "cycle_days": {{ state_attr(sensor_name, 'cycle_days') }},
              "warning_before": {{ state_attr(sensor_name, 'warning_before') }}
            } 
          }
        retain: true
    # Thank person who did the task
    - service: "notify.mobile_app_phone_{{ executor }}"
      data:
        title: "Danke!"
        message: "Herzlichen Dank daf√ºr, dass du die Aufgabe '{{ task_name }}' erledigt hast!"
    # Clear notification from other person's phone
    - service: "notify.mobile_app_phone_{{ other_person }}"
      data:
        message: clear_notification
        data:
          tag: "{{ task_id }}"
    # Notify other person that task has been done already
    - service: "notify.mobile_app_phone_{{ other_person }}"
      data:
        title: "Erledigt!"
        message: "{{ executor.title() }} hat die Aufgabe '{{ task_name }}' bereits erledigt!"